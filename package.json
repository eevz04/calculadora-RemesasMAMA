const express = require('express');
const cors = require('cors');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// Endpoint para obtener precios de Binance P2P
app.post('/api/binance-p2p', async (req, res) => {
    try {
        const { default: fetch } = await import('node-fetch');
        
        const requestBody = {
            fiat: req.body.fiat || 'BRL',
            page: req.body.page || 1,
            rows: req.body.rows || 10,
            tradeType: req.body.tradeType || 'SELL',
            asset: req.body.asset || 'USDT',
            countries: req.body.countries || [],
            proMerchantAds: req.body.proMerchantAds || false,
            shieldMerchantAds: false,
            filterType: 'all',
            periods: [],
            additionalKycVerifyFilter: 0,
            publisherType: req.body.publisherType || null,
            payTypes: [],
            classifies: ['mass', 'profession']
        };

        console.log('PeticiÃ³n a Binance P2P:', requestBody);

        const response = await fetch('https://p2p.binance.com/bapi/c2c/v2/friendly/c2c/adv/search', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log('Respuesta de Binance:', data.success ? 'Exitosa' : 'Error');
        
        res.json(data);
    } catch (error) {
        console.error('Error en Binance P2P:', error);
        res.status(500).json({ 
            success: false, 
            error: error.message 
        });
    }
});

// Endpoint para obtener precios de Bybit P2P
app.post('/api/bybit-p2p', async (req, res) => {
    try {
        const { default: fetch } = await import('node-fetch');
        
        const requestBody = {
            tokenId: 'USDT',
            currencyId: 'VES',
            payment: [],
            side: '1', // 1 = BUY, 0 = SELL
            size: '10',
            page: '1',
            amount: '',
            authMaker: false,
            canTrade: false
        };

        const response = await fetch('https://api2.bybit.com/fiat/otc/item/online', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        // Transformar respuesta de Bybit al formato esperado
        if (data.result && data.result.items) {
            const transformedData = {
                success: true,
                data: data.result.items.map(item => ({
                    adv: {
                        price: item.price,
                        surplusAmount: item.quantity
                    }
                }))
            };
            res.json(transformedData);
        } else {
            res.json({ success: false, error: 'No data found' });
        }
    } catch (error) {
        console.error('Error en Bybit P2P:', error);
        res.status(500).json({ 
            success: false, 
            error: error.message 
        });
    }
});

// Servir el archivo HTML principal
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.listen(PORT, () => {
    console.log(`Servidor corriendo en puerto ${PORT}`);
});
